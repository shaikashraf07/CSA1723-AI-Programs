
from collections import deque

def water_jug_solver(jug1_capacity, jug2_capacity, target):
    visited = set()
    queue = deque()
    queue.append((0, 0, []))  # (jug1, jug2, path)

    while queue:
        jug1, jug2, path = queue.popleft()

        if (jug1, jug2) in visited:
            continue

        visited.add((jug1, jug2))
        path = path + [(jug1, jug2)]

        if jug1 == target or jug2 == target:
            return path

        next_states = set()

        # Fill jug1 or jug2
        next_states.add((jug1_capacity, jug2))
        next_states.add((jug1, jug2_capacity))

        # Empty jug1 or jug2
        next_states.add((0, jug2))
        next_states.add((jug1, 0))

        # Pour jug1 -> jug2
        pour = min(jug1, jug2_capacity - jug2)
        next_states.add((jug1 - pour, jug2 + pour))

        # Pour jug2 -> jug1
        pour = min(jug2, jug1_capacity - jug1)
        next_states.add((jug1 + pour, jug2 - pour))

        for state in next_states:
            if state not in visited:
                queue.append((state[0], state[1], path))

    return None

if __name__ == "__main__":
    try:
        jug1 = int(input("Enter capacity of Jug 1: "))
        jug2 = int(input("Enter capacity of Jug 2: "))
        target = int(input("Enter target amount: "))

        result = water_jug_solver(jug1, jug2, target)

        if result:
            print("Solution steps:")
            for step in result:
                print(f"Jug1: {step[0]}L, Jug2: {step[1]}L")
        else:
            print("No solution found.")

    except Exception as e:
        print("Error:", e)
